// Code generated by protoc-gen-go.
// source: indexer.proto
// DO NOT EDIT!

/*
Package indexer is a generated protocol buffer package.

It is generated from these files:
	indexer.proto

It has these top-level messages:
	ResolveRequest
	ResolveResponse
	Matcher
	ValuesRequest
	ValuesResponse
*/
package indexer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MatcherType int32

const (
	MatcherType_Equal        MatcherType = 0
	MatcherType_NotEqual     MatcherType = 1
	MatcherType_RegexMatch   MatcherType = 2
	MatcherType_RegexNoMatch MatcherType = 3
)

var MatcherType_name = map[int32]string{
	0: "Equal",
	1: "NotEqual",
	2: "RegexMatch",
	3: "RegexNoMatch",
}
var MatcherType_value = map[string]int32{
	"Equal":        0,
	"NotEqual":     1,
	"RegexMatch":   2,
	"RegexNoMatch": 3,
}

func (x MatcherType) String() string {
	return proto.EnumName(MatcherType_name, int32(x))
}
func (MatcherType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ResolveRequest struct {
	Matchers  []*Matcher `protobuf:"bytes,1,rep,name=matchers" json:"matchers,omitempty"`
	Partition int32      `protobuf:"varint,2,opt,name=partition" json:"partition,omitempty"`
}

func (m *ResolveRequest) Reset()                    { *m = ResolveRequest{} }
func (m *ResolveRequest) String() string            { return proto.CompactTextString(m) }
func (*ResolveRequest) ProtoMessage()               {}
func (*ResolveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ResolveRequest) GetMatchers() []*Matcher {
	if m != nil {
		return m.Matchers
	}
	return nil
}

func (m *ResolveRequest) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

type ResolveResponse struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *ResolveResponse) Reset()                    { *m = ResolveResponse{} }
func (m *ResolveResponse) String() string            { return proto.CompactTextString(m) }
func (*ResolveResponse) ProtoMessage()               {}
func (*ResolveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResolveResponse) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Matcher struct {
	Type  MatcherType `protobuf:"varint,1,opt,name=type,enum=indexer.MatcherType" json:"type,omitempty"`
	Name  string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Value string      `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *Matcher) Reset()                    { *m = Matcher{} }
func (m *Matcher) String() string            { return proto.CompactTextString(m) }
func (*Matcher) ProtoMessage()               {}
func (*Matcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Matcher) GetType() MatcherType {
	if m != nil {
		return m.Type
	}
	return MatcherType_Equal
}

func (m *Matcher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Matcher) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ValuesRequest struct {
	Field     string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Partition int32  `protobuf:"varint,2,opt,name=partition" json:"partition,omitempty"`
}

func (m *ValuesRequest) Reset()                    { *m = ValuesRequest{} }
func (m *ValuesRequest) String() string            { return proto.CompactTextString(m) }
func (*ValuesRequest) ProtoMessage()               {}
func (*ValuesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ValuesRequest) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *ValuesRequest) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

type ValuesResponse struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ValuesResponse) Reset()                    { *m = ValuesResponse{} }
func (m *ValuesResponse) String() string            { return proto.CompactTextString(m) }
func (*ValuesResponse) ProtoMessage()               {}
func (*ValuesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ValuesResponse) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*ResolveRequest)(nil), "indexer.ResolveRequest")
	proto.RegisterType((*ResolveResponse)(nil), "indexer.ResolveResponse")
	proto.RegisterType((*Matcher)(nil), "indexer.Matcher")
	proto.RegisterType((*ValuesRequest)(nil), "indexer.ValuesRequest")
	proto.RegisterType((*ValuesResponse)(nil), "indexer.ValuesResponse")
	proto.RegisterEnum("indexer.MatcherType", MatcherType_name, MatcherType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Resolver service

type ResolverClient interface {
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
	Values(ctx context.Context, in *ValuesRequest, opts ...grpc.CallOption) (*ValuesResponse, error)
}

type resolverClient struct {
	cc *grpc.ClientConn
}

func NewResolverClient(cc *grpc.ClientConn) ResolverClient {
	return &resolverClient{cc}
}

func (c *resolverClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := grpc.Invoke(ctx, "/indexer.Resolver/Resolve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resolverClient) Values(ctx context.Context, in *ValuesRequest, opts ...grpc.CallOption) (*ValuesResponse, error) {
	out := new(ValuesResponse)
	err := grpc.Invoke(ctx, "/indexer.Resolver/Values", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Resolver service

type ResolverServer interface {
	Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error)
	Values(context.Context, *ValuesRequest) (*ValuesResponse, error)
}

func RegisterResolverServer(s *grpc.Server, srv ResolverServer) {
	s.RegisterService(&_Resolver_serviceDesc, srv)
}

func _Resolver_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResolverServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexer.Resolver/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResolverServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resolver_Values_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResolverServer).Values(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexer.Resolver/Values",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResolverServer).Values(ctx, req.(*ValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Resolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "indexer.Resolver",
	HandlerType: (*ResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _Resolver_Resolve_Handler,
		},
		{
			MethodName: "Values",
			Handler:    _Resolver_Values_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexer.proto",
}

func init() { proto.RegisterFile("indexer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x52, 0x41, 0x4f, 0xf2, 0x40,
	0x14, 0x64, 0x29, 0x05, 0xfa, 0x80, 0x7e, 0xcd, 0x0b, 0x81, 0x86, 0x7c, 0x07, 0x52, 0x2f, 0x8d,
	0x31, 0x1c, 0xf0, 0x68, 0xe2, 0xc5, 0x98, 0x78, 0x91, 0xc3, 0xc6, 0x78, 0xd2, 0x43, 0x95, 0xa7,
	0x36, 0x29, 0xdd, 0xd2, 0x5d, 0x08, 0xfc, 0x02, 0xff, 0xb6, 0x61, 0x77, 0x5b, 0x45, 0x0e, 0xde,
	0x66, 0x66, 0x67, 0xe7, 0xed, 0xbc, 0x16, 0x06, 0x69, 0xbe, 0xa4, 0x1d, 0x95, 0xb3, 0xa2, 0x14,
	0x4a, 0x60, 0xc7, 0xd2, 0xe8, 0x09, 0x7c, 0x4e, 0x52, 0x64, 0x5b, 0xe2, 0xb4, 0xde, 0x90, 0x54,
	0x78, 0x01, 0xdd, 0x55, 0xa2, 0x5e, 0x3f, 0xa8, 0x94, 0x21, 0x9b, 0x3a, 0x71, 0x6f, 0x1e, 0xcc,
	0xaa, 0xcb, 0xf7, 0xe6, 0x80, 0xd7, 0x0e, 0xfc, 0x0f, 0x5e, 0x91, 0x94, 0x2a, 0x55, 0xa9, 0xc8,
	0xc3, 0xe6, 0x94, 0xc5, 0x2e, 0xff, 0x16, 0xa2, 0x33, 0xf8, 0x57, 0xa7, 0xcb, 0x42, 0xe4, 0x92,
	0x30, 0x00, 0x27, 0x5d, 0x9a, 0x64, 0x8f, 0x1f, 0x60, 0xf4, 0x0c, 0x1d, 0x9b, 0x8b, 0x31, 0xb4,
	0xd4, 0xbe, 0xa0, 0x90, 0x4d, 0x59, 0xec, 0xcf, 0x87, 0xbf, 0xe7, 0x3e, 0xec, 0x0b, 0xe2, 0xda,
	0x81, 0x08, 0xad, 0x3c, 0x59, 0x91, 0x1e, 0xe9, 0x71, 0x8d, 0x71, 0x08, 0xee, 0x36, 0xc9, 0x36,
	0x14, 0x3a, 0x5a, 0x34, 0x24, 0xba, 0x81, 0xc1, 0xe3, 0x01, 0xc8, 0xaa, 0xe0, 0x10, 0xdc, 0xb7,
	0x94, 0xb2, 0xa5, 0x9e, 0xe2, 0x71, 0x43, 0xfe, 0x28, 0x12, 0x83, 0x5f, 0x85, 0xd8, 0x1e, 0x23,
	0x68, 0xeb, 0xfc, 0xaa, 0x8a, 0x65, 0xe7, 0x77, 0xd0, 0xfb, 0xf1, 0x5a, 0xf4, 0xc0, 0xbd, 0x5d,
	0x6f, 0x92, 0x2c, 0x68, 0x60, 0x1f, 0xba, 0x0b, 0xa1, 0x0c, 0x63, 0xe8, 0x03, 0x70, 0x7a, 0xa7,
	0x9d, 0x36, 0x07, 0x4d, 0x0c, 0xa0, 0xaf, 0xf9, 0x42, 0x18, 0xc5, 0x99, 0x7f, 0x32, 0xe8, 0xda,
	0xed, 0x95, 0x78, 0x0d, 0x1d, 0x8b, 0x71, 0x5c, 0xaf, 0xe5, 0xf8, 0xcb, 0x4d, 0xc2, 0xd3, 0x03,
	0xf3, 0xd8, 0xa8, 0x81, 0x57, 0xd0, 0x36, 0x05, 0x70, 0x54, 0xbb, 0x8e, 0xd6, 0x32, 0x19, 0x9f,
	0xe8, 0xd5, 0xe5, 0x97, 0xb6, 0xfe, 0x69, 0x2e, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x79, 0xff,
	0x98, 0x48, 0x45, 0x02, 0x00, 0x00,
}
